name: Build, Test & Deploy App - Prod

#
# This workflow provides a continuous delivery workflow for the default branch on the repository.
#

on:
  push:
    branches:
      - main

jobs:
  build_parameters:
    name: Define Build Parameters
    runs-on: ubuntu-latest

    # We need to share details across job boundaries, expose the step outputs at the job level
    outputs:
      container_name: ${{ steps.build_params.outputs.container_name }}
      maven_changelist: ${{ steps.build_params.outputs.maven_changelist }}
      maven_sha1: ${{ steps.build_params.outputs.maven_sha1 }}
      github_branch_name: ${{ steps.build_params.outputs.github_ref_branch_name }}
      github_short_sha: ${{ steps.build_params.outputs.github_short_sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Define Build Parameters
        id: build_params
        uses: actions/github-script@v3
        with:
          script: |
            const scriptPath = require('path').resolve('./.github/workflows/scripts/build_parameters.js')
              , buildParameters = require(scriptPath);
            ;
            buildParameters(context, core).injectBuildParameters();

  build:
    name: Build, Test and Package
    runs-on: ubuntu-latest

    needs:
      - build_parameters

    defaults:
      run:
        working-directory: application

    # We need to share details across job boundaries, expose the step outs at the job level
    outputs:
      container_registry: ${{ steps.maven_build.outputs.container_registry }}
      container_image: ${{ steps.maven_build.outputs.container_image }}
      container_version: ${{ steps.maven_build.outputs.container_version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      # Utilize caching of the resolved plugins and dependencies from previous Maven builds to provide
      # faster builds when dependencies have not changed.
      - name: Cache Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          # Hash on the POM file as that would need to change to modify the dependencies or plugins in use
          key: mvn-${{ matrix.java }}-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            mvn-${{ matrix.java }}-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
            mvn-${{ matrix.java }}-${{ runner.os }}
            mvn-${{ matrix.java }}
            mvn-

      - name: Build Test and Package
        id: maven_build
        run: |
          mvn package -B \
            -Dsha1="${{ needs.build_parameters.outputs.maven_sha1 }}" \
            -Dchangelist="${{ needs.build_parameters.outputs.maven_changelist }}" \
            -Dgithub.repository="${GITHUB_REPOSITORY}" \
            -Dcontainer.image.name="${{ needs.build_parameters.outputs.container_name }}"
        shell: bash

      # Publish the container if we successfully build under Linux
      - name: Sign in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
          registry: ghcr.io

      - name: Publish Container image
        id: container_publish
        run: |
          docker push ${{ steps.maven_build.outputs.container_registry }}/${{ steps.maven_build.outputs.container_image }}:${{ steps.maven_build.outputs.container_version }}

      - name: Publish App Container as a Status
        id: container_image_status
        uses: Sibz/github-status-action@v1
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          state: success
          context: Container Image Published - App
          description: ${{ steps.maven_build.outputs.container_image }}:${{ steps.maven_build.outputs.container_version }}

  deploy_qa:
    name: Deploy to QA
    runs-on: ubuntu-latest

    needs:
      - build

    environment:
      name: qa
      url: ${{ steps.get_deployment_url.outputs.DeploymentURL }}

    env:
      GHCR_APP_IMAGE: ghcr.io/${{ needs.build.outputs.container_image }}:${{ needs.build.outputs.container_version }}
      ACR_APP_IMAGE_FULL: ${{ secrets.ACR }}/${{ needs.build.outputs.container_image }}:${{ needs.build.outputs.container_version }}

      DEPLOYMENT_PREFIX: ${{ secrets.DEPLOYMENT_PREFIX }} # e.g. 'aks-cicd-dev'
      AKS_RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }} # e.g. 'aks_cicd_dev_rg'
      AKS_NAME: ${{ secrets.AKS_NAME }} # e.g. 'akscicddev-aks-b1ce1'
      AKS_APP_NAMESPACE: bookstore-advanced
      ACR_APP_IMAGE: ${{ secrets.ACR }}/${{ needs.build.outputs.container_image }} # e.g. ACR = 'akscicddevacrb1ce1.azurecr.io'
      ACR_APP_IMAGE_TAG: ${{ needs.build.outputs.container_version }}

    steps:
      - uses: actions/checkout@master
      - name: Sign in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
          registry: ghcr.io
      - name: Fetch Container Images from GHCR and Tag for ACR
        run: |
          docker pull $GHCR_APP_IMAGE
          docker tag $GHCR_APP_IMAGE $ACR_APP_IMAGE_FULL
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_SUBSCRIPTION }}
      - name: ACR Login
        run: |
          az acr login --name ${{ secrets.ACR }}
      - name: Push GHCR containers to ACR
        run: |
          docker push $ACR_APP_IMAGE_FULL
      - name: AZ AKS Login
        run: az aks get-credentials --resource-group ${{ env.AKS_RESOURCE_GROUP }} --name ${{ env.AKS_NAME }} --overwrite-existing --admin
        shell: bash
      - name: Run Helm Deploy
        working-directory: application/helm-charts
        run: ./helm_deploy_all.ps1 -Image "${{ env.ACR_APP_IMAGE }}" -Tag "${{ env.ACR_APP_IMAGE_TAG }}" -Namespace "${{ env.AKS_APP_NAMESPACE }}"
        shell: pwsh
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_SUBSCRIPTION }}
      - name: Get Deployment URL
        id: get_deployment_url
        run: |
          NodeResourceGroup=$(az aks show -g ${{ env.AKS_RESOURCE_GROUP }} -n ${{ env.AKS_NAME }} -o tsv --query nodeResourceGroup)
          
          IngressFQDN=$(az network public-ip show -n ${{ env.DEPLOYMENT_PREFIX }} -g $NodeResourceGroup -o tsv --query dnsSettings.fqdn)

          DeploymentURL="http://${IngressFQDN}/"
          echo "::set-output name=DeploymentURL::${DeploymentURL}"
          echo "::set-output name=DeploymentURL::http://aks-cicd-qa-13717.westeurope.cloudapp.azure.com/"

  deploy_prod:
    name: Deploy to PROD
    runs-on: ubuntu-latest

    needs:
      - build
      - deploy_qa

    environment:
      name: prod
      url: ${{ steps.get_deployment_url.outputs.DeploymentURL }}

    env:
      GHCR_APP_IMAGE: ghcr.io/${{ needs.build.outputs.container_image }}:${{ needs.build.outputs.container_version }}
      ACR_APP_IMAGE_FULL: ${{ secrets.ACR }}/${{ needs.build.outputs.container_image }}:${{ needs.build.outputs.container_version }}

      DEPLOYMENT_PREFIX: ${{ secrets.DEPLOYMENT_PREFIX }} # e.g. 'aks-cicd-dev'
      AKS_RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }} # e.g. 'aks_cicd_dev_rg'
      AKS_NAME: ${{ secrets.AKS_NAME }} # e.g. 'akscicddev-aks-b1ce1'
      AKS_APP_NAMESPACE: bookstore-advanced
      ACR_APP_IMAGE: ${{ secrets.ACR }}/${{ needs.build.outputs.container_image }} # e.g. ACR = 'akscicddevacrb1ce1.azurecr.io'
      ACR_APP_IMAGE_TAG: ${{ needs.build.outputs.container_version }}

    steps:
      - uses: actions/checkout@master
      - name: Sign in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
          registry: ghcr.io
      - name: Fetch Container Images from GHCR and Tag for ACR
        run: |
          docker pull $GHCR_APP_IMAGE
          docker tag $GHCR_APP_IMAGE $ACR_APP_IMAGE_FULL
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_SUBSCRIPTION }}
      - name: ACR Login
        run: |
          az acr login --name ${{ secrets.ACR }}
      - name: Push GHCR containers to ACR
        run: |
          docker push $ACR_APP_IMAGE_FULL
      - name: AZ AKS Login
        run: az aks get-credentials --resource-group ${{ env.AKS_RESOURCE_GROUP }} --name ${{ env.AKS_NAME }} --overwrite-existing --admin
        shell: bash
      - name: Run Helm Deploy
        working-directory: application/helm-charts
        run: ./helm_deploy_all.ps1 -Image "${{ env.ACR_APP_IMAGE }}" -Tag "${{ env.ACR_APP_IMAGE_TAG }}" -Namespace "${{ env.AKS_APP_NAMESPACE }}"
        shell: pwsh
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_SUBSCRIPTION }}
      - name: Get Deployment URL
        id: get_deployment_url
        run: |
          NodeResourceGroup=$(az aks show -g ${{ env.AKS_RESOURCE_GROUP }} -n ${{ env.AKS_NAME }} -o tsv --query nodeResourceGroup)
          
          IngressFQDN=$(az network public-ip show -n ${{ env.DEPLOYMENT_PREFIX }} -g $NodeResourceGroup -o tsv --query dnsSettings.fqdn)

          DeploymentURL="http://${IngressFQDN}/"
          echo $DeploymentURL
          echo "::set-output name=DeploymentURL::${DeploymentURL}"
          echo "::set-output name=DeploymentURL::http://aks-cicd-prod-edc62.northeurope.cloudapp.azure.com/"
